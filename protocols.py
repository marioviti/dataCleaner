"""
DEFINE DIMENSIONAL FEATURE SHAPES

BITS:

TENSOR_1D, TENSOR_2D, TENSOR_3D, CHANNEL_LAST, CHANNEL_FIRST

"""
import math

UNSET = 0
TENSOR_1D = 1 << 0
TENSOR_2D = 1 << 1
TENSOR_3D = 1 << 2
VERTICES = TENSOR_1D
CHANNEL_LAST = 1 << 3
CHANNEL_FIRST = 1 << 4
TENSOR_ND_MASK = (1 << 3) -1
CHANNEL_ORDER_MASK = ((1 << 5) -1) & ~ TENSOR_ND_MASK

TENSOR_1D_CL = TENSOR_1D | CHANNEL_FIRST 
TENSOR_1D_LC = TENSOR_1D | CHANNEL_LAST

TENSOR_2D_CHW = TENSOR_2D | CHANNEL_FIRST
TENSOR_2D_HWC = TENSOR_2D | CHANNEL_LAST

TENSOR_3D_CHWD = TENSOR_3D | CHANNEL_FIRST
TENSOR_3D_HWDC = TENSOR_3D | CHANNEL_LAST

TENSOR_VERTICES_CL = TENSOR_1D_CL
TENSOR_VERTICES_LC = TENSOR_1D_LC

def set_channel_first(protocol):
    return (protocol & ~ CHANNEL_ORDER_MASK) | CHANNEL_FIRST

def set_channel_last(protocol):
    return (protocol & ~ CHANNEL_ORDER_MASK) | CHANNEL_LAST

def is_channel_first(protocol):
    return protocol & CHANNEL_ORDER_MASK == CHANNEL_FIRST

def is_channel_last(protocol):
    return protocol & CHANNEL_ORDER_MASK == CHANNEL_LAST

def set_num_dims(protocol,dims):
    return (protocol & ~ TENSOR_ND_MASK) | (1 << (dims-1))

def get_num_dims(protocol):
    return int( math.log(protocol & TENSOR_ND_MASK,2) + 1 )

# 32 bits 16 for input 16 for output
#      input mask     output mask
# |----------------|----------------|

INPUT_BITS_OFFSET = 15
DENSE_SEGMENTATION_3D_CHWD = (TENSOR_3D_CHWD << INPUT_BITS_OFFSET) | TENSOR_3D_CHWD
DENSE_SEGMENTATION_3D_HWDD = (TENSOR_3D_HWDC << INPUT_BITS_OFFSET) | TENSOR_3D_HWDC

DENSE_SEGMENTATION_2D_CHW = (TENSOR_2D_CHW << INPUT_BITS_OFFSET) | TENSOR_2D_CHW
DENSE_SEGMENTATION_2D_HWC = (TENSOR_2D_HWC << INPUT_BITS_OFFSET) | TENSOR_2D_HWC

DENSE_SEGMENTATION_1D_CL = (TENSOR_1D_CL << INPUT_BITS_OFFSET) | TENSOR_1D_CL
DENSE_SEGMENTATION_1D_LC = (TENSOR_1D_LC << INPUT_BITS_OFFSET) | TENSOR_1D_LC

CLASSIFICATION_3D_CHWD = (TENSOR_3D_CHWD << INPUT_BITS_OFFSET) | TENSOR_VERTICES_CL
CLASSIFICATION_3D_HWDC = (TENSOR_3D_HWDC << INPUT_BITS_OFFSET) | TENSOR_VERTICES_LC

CLASSIFICATION_2D_CHW = (TENSOR_2D_CHW << INPUT_BITS_OFFSET) | TENSOR_VERTICES_CL
CLASSIFICATION_2D_HWC = (TENSOR_2D_HWC << INPUT_BITS_OFFSET) | TENSOR_VERTICES_LC

CLASSIFICATION_1D_CL = (TENSOR_1D_CL << INPUT_BITS_OFFSET) | TENSOR_VERTICES_CL
CLASSIFICATION_1D_LC = (TENSOR_1D_LC << INPUT_BITS_OFFSET) | TENSOR_VERTICES_LC